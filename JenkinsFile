pipeline {
    agent any


        environment { 
        REGION = "us-east-1"
    }

    stages {
    stage('Checkout Code') {
        steps {
            echo 'scm git'
            git branch: 'main', url: 'https://github.com/rajudonkeshwar/cicd-java-2.git'
        }
    }
    
    
    stage('Compile and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'mvn compile && mvn test'
      }
    }


    stage('sonar') {
    steps {
        echo 'scanning project'
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_TOKEN')]) {
            sh """
            mvn clean verify sonar:sonar \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=$SONAR_TOKEN
            """
        }
    }
}




    stage(' scaning of source code and its dependencies '){
    steps{
        sh "trivy fs ."
    }
}





// stage('Dependency Check') {
    
//     steps {
//         sh '''
//           /opt/dependency-check/bin/dependency-check.sh \
//           --project "SpringBootApp" \
//           --scan java-cicd-project/spring-boot-app \
//           --format HTML \
//           --data $WORKSPACE/odc-data \
//           --out dependency-check-report
//         '''
//     }
// }




//     stage('Publish Report') {
//         steps {
//             publishHTML([
//                 allowMissing: false,
//                 alwaysLinkToLastBuild: true,
//                 keepAll: true,
//                 reportDir: 'dependency-check-report',
//                 reportFiles: 'dependency-check-report.html',
//                 reportName: 'OWASP Dependency-Check Report'
//             ])
//         }
//     }


    stage('Building the code') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'mvn clean package'
      }
    }



    stage('Deploy to Nexus') {
    steps{
        script{
            withCredentials([usernamePassword(credentialsId: 'naxus',
            usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                sh 'mvn clean deploy -s settings.xml'
        }
        }
    }
}



    stage('Build docker image'){
    steps{
        script{
            echo 'docker image build'
            sh ' docker build -t rajudonkeshwar/java1:${BUILD_NUMBER} .'
        }
    }
}
		
    stage('docker image scan'){
    steps{
        sh "trivy image rajudonkeshwar/java1:${BUILD_NUMBER}"
    }
}		


stage('Push image to Hub'){
    steps{
        script{
            withCredentials([string(credentialsId: 'dockerhub', variable: 'dockerhub')]) {
            sh 'docker login -u rajudonkeshwar -p ${dockerhub}'

      }
            sh "docker push rajudonkeshwar/java1:${BUILD_NUMBER}"
        }
    }
}


stage('Deploying image to docker container'){
    steps{
        script{


            def containerExists = sh(
                script: 'docker ps -a --filter "name=java-app" --format "{{.Names}}"',
                returnStdout: true
            ).trim()

            if (containerExists) {
                echo "Container exists: ${containerExists}"
                 sh ' docker rm -f java-app '
            } else {
                echo "No container found with name java-app"
                sh 'docker run -itd --name java-app -p 8000:8080 rajudonkeshwar/java1:${BUILD_NUMBER}'

            }
           

        }
    }
}


        stage('Deploy') {
            steps {
                script{
                    withAWS(region: 'us-east-1', credentials: "aws-creds") {
                        sh """
                            aws eks update-kubeconfig --region $REGION --name expense
                            kubectl get nodes
                            cd helm
                            sed -i 's/image-version/${BUILD_NUMBER}/g' deployment.yaml
                            kubectl apply -f deployment.yaml
                            kubectl apply -f service.yaml
                            
                        """
                    }
                }
            }
        }







  }
}
